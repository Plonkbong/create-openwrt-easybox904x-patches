diff -aurN a/drivers/mtd/nand/nand_bbt.c b/drivers/mtd/nand/nand_bbt.c
--- a/drivers/mtd/nand/nand_bbt.c	2019-03-04 21:59:44.816321790 +0000
+++ b/drivers/mtd/nand/nand_bbt.c	2019-03-04 21:59:44.957320027 +0000
@@ -76,6 +76,34 @@
 #define BBT_ENTRY_MASK		0x03
 #define BBT_ENTRY_SHIFT		2
 
+#define CUSTOMIZED_BBT 1
+#if CUSTOMIZED_BBT
+  #define	BAD_BLK_OOB_MARK_START	4
+  #define	BAD_BLK_OOB_MARK_END	5
+  #define	BAD_BLK_OOB_MARK_PATT	0xFF
+
+
+#include <linux/mtd/rawnand.h>
+#include <linux/of.h>
+
+static bool of_get_customized_bbt_from_mtd(struct mtd_info *mtd)
+{
+	struct nand_chip *chip = mtd_to_nand(mtd);
+	struct device_node *dn = nand_get_flash_node(chip);
+	pr_info("CUSTOMIZED_BBT: bool of_get_customized_bbt_from_mtd(struct mtd_info *mtd) return %i\n", of_property_read_bool(dn, "customized-samsung-K9F4G08U0x"));
+	return of_property_read_bool(dn, "customized-samsung-K9F4G08U0x");
+}
+
+static bool of_get_customized_bbt_from_chip(struct nand_chip *chip)
+{
+	struct device_node *dn = nand_get_flash_node(chip);
+	pr_info("CUSTOMIZED_BBT: bool of_get_customized_bbt_from_chip(struct nand_chip *chip) return %i\n", of_property_read_bool(dn, "customized-samsung-K9F4G08U0x"));
+	return of_property_read_bool(dn, "customized-samsung-K9F4G08U0x");
+}
+
+#endif
+
+
 static int nand_update_bbt(struct mtd_info *mtd, loff_t offs);
 
 static inline uint8_t bbt_get_entry(struct nand_chip *chip, int block)
@@ -109,8 +137,15 @@
  * Check for a pattern at the given place. Used to search bad block tables and
  * good / bad block identifiers.
  */
+#if CUSTOMIZED_BBT
+static int check_pattern(struct mtd_info *mtd, uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
+{
+	int i;
+	uint8_t *p = buf;
+#else
 static int check_pattern(uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
 {
+#endif
 	if (td->options & NAND_BBT_NO_OOB)
 		return check_pattern_no_oob(buf, td);
 
@@ -118,6 +153,20 @@
 	if (memcmp(buf + paglen + td->offs, td->pattern, td->len))
 		return -1;
 
+#if CUSTOMIZED_BBT /*ctc*/
+	if (of_get_customized_bbt_from_mtd(mtd)) {
+		pr_info("CUSTOMIZED_BBT: for (i = BAD_BLK_OOB_MARK_START, p=buf+paglen; i <= BAD_BLK_OOB_MARK_END; i++) ... = for (%i = %i, %i=%i+%i; %i <= %i; %i++)\n", i, BAD_BLK_OOB_MARK_START, (buf+paglen), buf, paglen, i, BAD_BLK_OOB_MARK_END, i);
+		for (i = BAD_BLK_OOB_MARK_START, p=buf+paglen; i <= BAD_BLK_OOB_MARK_END; i++) {
+			pr_info("CUSTOMIZED_BBT: i = %i / p[i] = %i \n", i, p[i]);
+			if (p[i] != BAD_BLK_OOB_MARK_PATT) {
+				pr_info("CUSTOMIZED_BBT: %i(p[i]) != %i(BAD_BLK_OOB_MARK_PATT) / for loop ends with: return -1\n", p[i], BAD_BLK_OOB_MARK_PATT);
+				return -1;
+			}
+		}
+		pr_info("CUSTOMIZED_BBT: for loop ends with: }\n");
+	}
+#endif
+
 	return 0;
 }
 
@@ -561,7 +610,11 @@
 
 			/* Read first page */
 			scan_read(mtd, buf, offs, mtd->writesize, td);
+#if CUSTOMIZED_BBT
+			if (!check_pattern(mtd, buf, scanlen, mtd->writesize, td)) {
+#else
 			if (!check_pattern(buf, scanlen, mtd->writesize, td)) {
+#endif
 				td->pages[i] = actblock << blocktopage;
 				if (td->options & NAND_BBT_VERSION) {
 					offs = bbt_get_ver_offs(mtd, td);
@@ -1277,8 +1330,13 @@
 static uint8_t scan_ff_pattern[] = { 0xff, 0xff };
 
 /* Generic flash bbt descriptors */
+//#if CUSTOMIZED_BBT /*ctc*/
+//static uint8_t bbt_pattern[] = {'A', 'R', 'C', 'A' };
+//static uint8_t mirror_pattern[] = {'a', 'c', 'r', 'a' };
+//#else
 static uint8_t bbt_pattern[] = {'B', 'b', 't', '0' };
 static uint8_t mirror_pattern[] = {'1', 't', 'b', 'B' };
+//#endif
 
 static struct nand_bbt_descr bbt_main_descr = {
 	.options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
@@ -1340,7 +1398,17 @@
 	bd = kzalloc(sizeof(*bd), GFP_KERNEL);
 	if (!bd)
 		return -ENOMEM;
+
+#if CUSTOMIZED_BBT /*ctc*/
+	if (of_get_customized_bbt_from_chip(this)) {
+		pr_info("CUSTOMIZED_BBT: bd->options = 0 & BADBLOCK_SCAN_MASK = %i\n", (0 & BADBLOCK_SCAN_MASK));
+		bd->options = 0 & BADBLOCK_SCAN_MASK;
+	} else {
+		bd->options = this->bbt_options & BADBLOCK_SCAN_MASK;
+	}
+#else
 	bd->options = this->bbt_options & BADBLOCK_SCAN_MASK;
+#endif
 	bd->offs = this->badblockpos;
 	bd->len = (this->options & NAND_BUSWIDTH_16) ? 2 : 1;
 	bd->pattern = scan_ff_pattern;
@@ -1360,17 +1428,34 @@
 {
 	struct nand_chip *this = mtd_to_nand(mtd);
 	int ret;
-
+/* change the generic bad / good block scan pattern if of_get_customized_bbt_from_chip(this) true */
+#if CUSTOMIZED_BBT
+	if(of_get_customized_bbt_from_chip(this)) {
+		pr_info("CUSTOMIZED_BBT: setting other values for bbt_pattern and mirror_pattern\n");
+		bbt_pattern[0] = 'A';
+		bbt_pattern[1] = 'R';
+		bbt_pattern[2] = 'C';
+		bbt_pattern[3] = 'A';
+		mirror_pattern[0] = 'a';
+		mirror_pattern[1] = 'c';
+		mirror_pattern[2] = 'r';
+		mirror_pattern[3] = 'a';
+	}
+#endif
 	/* Is a flash based bad block table requested? */
 	if (this->bbt_options & NAND_BBT_USE_FLASH) {
 		/* Use the default pattern descriptors */
 		if (!this->bbt_td) {
 			if (this->bbt_options & NAND_BBT_NO_OOB) {
 				this->bbt_td = &bbt_main_no_oob_descr;
+				pr_info("CUSTOMIZED_BBT: this->bbt_td->pattern[] = \"%c %c %c %c\" \n", this->bbt_td->pattern[0], this->bbt_td->pattern[1], this->bbt_td->pattern[2], this->bbt_td->pattern[3]);
 				this->bbt_md = &bbt_mirror_no_oob_descr;
+				pr_info("CUSTOMIZED_BBT: this->bbt_md->pattern[] = \"%c %c %c %c\" \n", this->bbt_md->pattern[0], this->bbt_md->pattern[1], this->bbt_md->pattern[2], this->bbt_md->pattern[3]);
 			} else {
 				this->bbt_td = &bbt_main_descr;
+				pr_info("CUSTOMIZED_BBT: this->bbt_td->pattern[] = \"%c %c %c %c\" \n", this->bbt_td->pattern[0], this->bbt_td->pattern[1], this->bbt_td->pattern[2], this->bbt_td->pattern[3]);
 				this->bbt_md = &bbt_mirror_descr;
+				pr_info("CUSTOMIZED_BBT: this->bbt_md->pattern[] = \"%c %c %c %c\" \n", this->bbt_md->pattern[0], this->bbt_md->pattern[1], this->bbt_md->pattern[2], this->bbt_md->pattern[3]);
 			}
 		}
 	} else {
